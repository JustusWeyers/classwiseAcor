// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _classwiseAcor_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// acor_pairs
NumericMatrix acor_pairs(NumericMatrix data, NumericVector FromTo);
RcppExport SEXP _classwiseAcor_acor_pairs(SEXP dataSEXP, SEXP FromToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FromTo(FromToSEXP);
    rcpp_result_gen = Rcpp::wrap(acor_pairs(data, FromTo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_classwiseAcor_rcpp_hello_world", (DL_FUNC) &_classwiseAcor_rcpp_hello_world, 0},
    {"_classwiseAcor_acor_pairs", (DL_FUNC) &_classwiseAcor_acor_pairs, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_classwiseAcor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
